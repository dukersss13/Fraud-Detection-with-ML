of 0.05.")
} else{
paste("The P-value of the 2-sample t-test is:", round(test$p.value,2), "which suggests
that the", input$percentSelect2, "between the two counties are
statistically different at a significance level of 0.05.")
}
})
# Pearson Scatter Plot ####
output$correlation = renderPlot({
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
if(is.null(input$countySelect3)) return(NULL)
ggplot(filtered3(), aes(x = filtered3()[,2], y = filtered3()[,3])) +
geom_point(size = 3, color = "#56B4E9") +
geom_smooth(method = "lm", se = F, size = 0.8, color = "black") +
labs(title = paste("Police-Civilian Use of Force in", input$countySelect3),
subtitle = paste("with Pearson Correlation:", round(cor(filtered3()[,2],filtered3()[,3]),4)),
x = names(filtered3()[2]), y = names(filtered3()[3])) +
theme_bw() +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 13, hjust = 0.5))
})
# Kendall Matrix ####
output$corrMatrix = renderPlot({
if(is.null(input$countySelect3)) return(NULL)
filtered4 = data %>%
filter(county %in% input$countySelect3) %>%
select(-county)
filtered4 = filtered4[, colSums(filtered4 != 0) > 0]
ggcorrplot(cor(filtered4[1:as.integer(length(filtered4)/2)],
filtered4[as.integer(length(filtered4)/2+1):length(filtered4)],
method = "kendall"),
hc.order = T, lab= T,
ggtheme = ggplot2::theme_light, outline.color = "white",
title = paste("Police(x) - Civilian(y) Violence in", input$countySelect3,
"\n (Kendall Rank Correlation Matrix)"),
colors = c("#6D9EC1", "white", "#E46726"),
legend.title = "Kendall Correlation") +
theme(plot.title = element_text(hjust = 0.5))
})
}
shinyApp(ui = ui, server = server)
# Select county and all percentage columns:
data = data %>%
select(county, starts_with('pct_')) %>%
select(-c("pct_officers_injured", "pct_subjects_injured"))
library(dplyr)
library(shiny)
library(reshape2)
library(ggplot2)
library(stringr)
library(ggcorrplot)
# Data Processing ####
data = read.csv("UOF.csv")
# Select county and all percentage columns:
data = data %>%
select(county, starts_with('pct_')) %>%
select(-c("pct_officers_injured", "pct_subjects_injured"))
# Rename the percentage columns:
for(i in 2:dim(data)[2]){
split_names = str_split(names(data)[i],'_', simplify = TRUE)
if(length(split_names) == 3){
names(data)[i] = paste("Percent", str_to_title(split_names[1,2]),
str_to_title(split_names[1,3]))
} else{
names(data)[i] = paste("Percent", str_to_title(split_names[1,2]))
}
}
data[is.na(data)] = 0
attach(data)
# UI ####
if (interactive()) {
ui = fluidPage(titlePanel("New Jersey Police Data"),
sidebarLayout(
sidebarPanel(radioButtons("corrInput","Show Correlation Graph",
choices = c("Yes","No"), selected = "No"),
conditionalPanel(condition = "input.corrInput == 'No'",
uiOutput("countyOutput1"),
uiOutput("countyOutput2")
),
conditionalPanel(condition = "input.corrInput == 'Yes'",
uiOutput("countyOutput")),
uiOutput("percentOutput1"),
uiOutput("percentOutput2")),
mainPanel(conditionalPanel(
condition = "input.corrInput == 'No'",
#textOutput('kendall'),
#br(),
plotOutput("plot1"),
br(),
textOutput('t_test1'),
br(),
plotOutput("plot2"),
br(),
textOutput('t_test2'),
br()),
conditionalPanel(
condition = "input.corrInput == 'Yes'",
plotOutput("correlation"),
br(),
br(),
plotOutput("corrMatrix"))
)
)
)
}
# Server ####
server = function(input, output) {
filtered1 = reactive ({
if(is.null(input$countySelect1)) return(NULL)
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
data %>%
filter(county %in% input$countySelect1) %>%
select(county, input$percentSelect1, input$percentSelect2)
})
filtered2 = reactive ({
if(is.null(input$countySelect2)) return(NULL)
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
data %>%
filter(county %in% input$countySelect2)%>%
select(county, input$percentSelect1, input$percentSelect2)
})
consolidate.df = reactive ({
rbind(filtered1(), filtered2())
})
filtered3 = reactive({
if(is.null(input$countySelect3)) return(NULL)
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
data %>%
filter(county %in% input$countySelect3) %>%
select(county, input$percentSelect1, input$percentSelect2)
})
# countySelect1 ####
output$countyOutput1 = renderUI ({
selectInput("countySelect1", "Select County 1",
choices = sort(unique(county)), selected = 'Atlantic')
})
# countySelect2 ####
output$countyOutput2 = renderUI({
dropdown2 = data %>% filter(!county %in% input$countySelect1)
selectInput("countySelect2", "Select County 2",
choices = sort(unique(dropdown2$county)),selected = 'Bergen')
})
#countySelect3 ####
output$countyOutput = renderUI({
selectInput("countySelect3", "Select County to See Correlation",
choices = sort(unique(county)),selected = 'Atlantic')
})
# percentSelect1 ####
output$percentOutput1 = renderUI ({
selectInput("percentSelect1", "Select Police Use of Force",
choices = names(data)[2:8],selected = "Percent Complaince Hold")
})
# percentSelect2 ####
output$percentOutput2 = renderUI({
selectInput("percentSelect2", "Select Civilian Use of Force",
choices = names(data)[9:length(data)],selected = "Percent Hands Fists")
})
# plot1 ####
output$plot1 = renderPlot({
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
ggplot(consolidate.df(), aes(x = consolidate.df()[,2]  , y = ..density..)) +
geom_density(aes(color = county, fill = county), alpha = 0.2, size = 0.7) +
labs(x = names(consolidate.df())[2], y = "Density") +
guides(fill = guide_legend(title= "County"),
color = guide_legend(title = "County")) + theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 11))
})
# plot2 ####
output$plot2 = renderPlot({
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
if(is.null(input$countySelect2)) return(NULL)
ggplot(consolidate.df(), aes(x = consolidate.df()[,3] , y = ..density..)) +
geom_density(aes(color = county, fill = county), alpha = 0.2, size = 0.7) +
labs(x = names(consolidate.df())[3], y = "Density") +
guides(fill = guide_legend(title= "County"),
color = guide_legend(title = "County")) + theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 11))
})
# Kendall Coeff Text ####
output$kendall = renderText({
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
if(is.null(input$countySelect3)) return(NULL)
kd = round(cor(filtered3()[,2],filtered3()[,3],method = "kendall"),4)
paste("Kendall Rank Coefficient:", kd)
})
# t.test1 text ####
output$t_test1 = renderText({
if(is.null(input$countySelect2)) return(NULL)
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
test = t.test(consolidate.df()[,2]~county,
data = consolidate.df(), paired = FALSE)
if(test$p.value > 0.05){
paste("The P-value of the 2-sample t-test is:", round(test$p.value,2), "which suggests
that there is no sufficient evidence that the", input$percentSelect1, "between
the two counties are statistically different at a significance level
of 0.05.")
} else{
paste("The P-value of the 2-sample t-test is:", round(test$p.value,2), "which suggests
that the", input$percentSelect1, "between the two counties are
statistically different at a significance level of 0.05.")
}
})
# t.test2 text ####
output$t_test2 = renderText({
if(is.null(input$countySelect2)) return(NULL)
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
test = t.test(consolidate.df()[,3]~county,
data = consolidate.df(), paired = FALSE)
if(test$p.value > 0.05){
paste("The P-value of the 2-sample t-test is:", round(test$p.value,2), "which suggests
that there is no sufficient evidence that the", input$percentSelect2, "between
the two counties are statistically different at a significance level
of 0.05.")
} else{
paste("The P-value of the 2-sample t-test is:", round(test$p.value,2), "which suggests
that the", input$percentSelect2, "between the two counties are
statistically different at a significance level of 0.05.")
}
})
# Pearson Scatter Plot ####
output$correlation = renderPlot({
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
if(is.null(input$countySelect3)) return(NULL)
ggplot(filtered3(), aes(x = filtered3()[,2], y = filtered3()[,3])) +
geom_point(size = 3, color = "#56B4E9") +
geom_smooth(method = "lm", se = F, size = 0.8, color = "black") +
labs(title = paste("Police-Civilian Use of Force in", input$countySelect3),
subtitle = paste("with Pearson Correlation:", round(cor(filtered3()[,2],filtered3()[,3]),4)),
x = names(filtered3()[2]), y = names(filtered3()[3])) +
theme_bw() +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 13, hjust = 0.5))
})
# Kendall Matrix ####
output$corrMatrix = renderPlot({
if(is.null(input$countySelect3)) return(NULL)
filtered4 = data %>%
filter(county %in% input$countySelect3) %>%
select(-county)
filtered4 = filtered4[, colSums(filtered4 != 0) > 0]
ggcorrplot(cor(filtered4[1:as.integer(length(filtered4)/2)],
filtered4[as.integer(length(filtered4)/2+1):length(filtered4)],
method = "kendall"),
hc.order = T, lab= T,
ggtheme = ggplot2::theme_light, outline.color = "white",
title = paste("Police(x) - Civilian(y) Violence in", input$countySelect3,
"\n (Kendall Rank Correlation Matrix)"),
colors = c("#6D9EC1", "white", "#E46726"),
legend.title = "Kendall Correlation") +
theme(plot.title = element_text(hjust = 0.5))
})
}
shinyApp(ui = ui, server = server)
M = 9000
sd = 260
n = 169
?t.test
?confint
library(shiny); runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2 v2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Module2 Publish')
library(pROC)
library(dplyr)
library(MASS)
library(AER)
library(ROSE)
library(pROC)
library(mlbench)
library(foreign)
d = get(data(BostonHousing))
dim(d)
names(d)
threshold = mean(medv)
d$medv = ifelse(d$medv >= threshold, 1, 0)
head(d)
attach(d)
base = glm(medv~., data = d, family = "binomial")
final1 = stepAIC(base)
summary(final1)
paste0(round(exp(summary(final1)$coef[,1]),3))
paste0(round(((exp(summary(final1)$coef[,1]))-1)*100,3),"%")
round(exp(summary(final1)$coef[,1]),3)
base = glm(medv~., data = d, family = "binomial")
threshold = mean(medv)
threshold = median(medv)
d$medv = ifelse(d$medv >= threshold, 1, 0)
head(d)
attach(d)
base = glm(medv~., data = d, family = "binomial")
final1 = stepAIC(base)
summary(final1)
paste0(round(exp(summary(final1)$coef[,1]),3))
paste0(round(((exp(summary(final1)$coef[,1]))-1)*100,3),"%")
round(exp(summary(final1)$coef[,1]),3)
pp1 = predict(final1, type = "response")
predicted.values = predict(final1, d$medv)
roc.curve(medv, pp1)
predicted.values = predict(final1, d)
predicted.values
predicted.values = predict(final1, d$medv)
predicted.values = predict(final1, d$medv)
str(d$medv)
predicted.values = predict(final1, as.factor(d$medv))
predicted.values
predicted.values = predict(pp1, as.factor(d$medv))
roc.curve(medv, pp1)
roc = roc.curve(medv, pp1)
names(roc)
roc$thresholds
roc$Call
roc$auc
roc$false.positive.rate
max(roc$true.positive.rate)
index(max(roc$true.positive.rate) & min(roc$false.positive.rate))
roc$true.positive.rate
roc$false.positive.rate
c = cbind(roc$true.positive.rate, roc$false.positive.rate)
c
c %>% filter(max(c[,1]) & min(c[,2]))
which.max(roc$true.positive.rate - roc$false.positive.rate)
roc$thresholds[55]
best_threshold_index = which.max(roc$true.positive.rate - roc$false.positive.rate)
optimal.threshold = roc$thresholds[best_threshold_index]
install.packages("ANN2")
svmPoly = train(isFraud~., data = train.smote, method = "svmPoly", trControl = train.control)
library(shiny); runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2 v2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2 v2.R')
library(dplyr)
library(MASS)
library(AER)
library(ROSE)
library(pROC)
library(mlbench)
library(foreign)
d = get(data(BostonHousing))
View(d)
str(d)
quantile(d$medv, c(0.25, 0.75))
q = quantile(d$medv, c(0.25, 0.75))
q[1]
14>q[1]
for (i in d$medv){
if (i < q[1]){
i = 0
} else if(i >= q[1] & i <= q[2]){
i = 1
} else{ i = 2}
}
View(d)
for i in d$medv print(i)
?mutate
View(d)
q[1]
q[2]
q[1] * 12
d2 = d %>%
mutate(d$medv, d$medv < p[1], 0)
d2 = d %>%
mutate(medv, medv < p[1], 0)
d$medv[d$medv < p[1]] == 0
d2 = d %>%
mutate(medv, medv < q[1], 0)
View(d2)
rm(list = ls())
d = get(data(BostonHousing))
str(d)
q = quantile(d$medv, c(0.25, 0.75))
d$medv[d$medv < q[1]] = 0
d$medv[d$medv >= q[1] & d$medv <= q[2]] = 1
d = get(data(BostonHousing))
str(d)
q = quantile(d$medv, c(0.25, 0.75))
d$medv[d$medv < q[1]] = 0
d$medv = ifelse(d$medv >= q[1] & d$medv <= q[2], 1, 2)
d$medv = as.factor(d$medv)
str(d)
table(d$medv)
rm(list = ls())
d = get(data(BostonHousing))
str(d)
q = quantile(d$medv, c(0.25, 0.75))
d$medv = ifelse(d$medv < q[1], ifelse(d$medv >= q[1] & d$medv < q[2], 1, 2), 0)
View(d)
table(d$medv)
d$medv = ifelse(d$medv < q[1], ifelse(d$medv >= q[1] && d$medv < q[2], 1, 2), 0)
table(d$medv)
d$medv = ifelse(d$medv < q[1], ifelse(d$medv >= q[1] & d$medv <= q[2], 1, 2), 0)
table(d$medv)
d = get(data(BostonHousing))
str(d)
q = quantile(d$medv, c(0.25, 0.75))
d$medv = ifelse(d$medv < q[1], ifelse(d$medv >= q[1] & d$medv <= q[2], 1, 2), 0)
table(d$medv)
d$medv = ifelse(d$medv < q[1], 0, ifelse(d$medv >= q[1] & d$medv <= q[2], 1, 2))
rm(list = ls())
d = get(data(BostonHousing))
str(d)
q = quantile(d$medv, c(0.25, 0.75))
d$medv = ifelse(d$medv < q[1], 0, ifelse(d$medv >= q[1] & d$medv <= q[2], 1, 2))
table(d$medv)
library(nnet)
install.packages("VGAM")
library(nnet)
fit.nnet = multinom(medv~., data = d)
coef(fit.nnet)
summary(fit.nnet)
library(VGAM)
fit.vgam = vglm(medv~., data = d)
fit.vgam = vglm(medv~., multinomial(refLevel = 0), data = d)
fit.vgam = vglm(medv~., multinomial(refLevel = 1), data = d)
fit.vgam@coefficients
summary(fit.vgam)
fit.vgam2 = vgam(medv~., data = d)
fit.vgam2 = vgam(medv~., multionomial(refLevel = 1), data = d)
fit.vgam2 = vgam(medv~., multinomial(refLevel = 1), data = d)
summary(fit.vgam2)
fit.vglm = vglm(medv~., multinomial(refLevel = 1), data = d)
summary(fit.vglm)
summary(fit.nnet)
summary(fit.vglm)
summary(fit.vglm)
View(d)
fit.vglm = vglm(medv~., multinomial(refLevel = 2), data = d)
summary(fit.vglm)
fit.vglm = vglm(medv~., multinomial(refLevel = 3), data = d)
summary(fit.vglm)
fit.vglm = vglm(medv~., multinomial(refLevel = 1), data = d)
summary(fit.vglm)
summary(fit.vglm)
library(dplyr)
library(MASS)
library(VGAM)
library(mlbench)
rm(list = ls())
d = get(data(BostonHousing))
str(d)
q = quantile(d$medv, c(0.25, 0.75))
d$medv = ifelse(d$medv < q[1], 0, ifelse(d$medv >= q[1] & d$medv <= q[2], 1, 2))
table(d$medv)
fit.vglm = vglm(medv~., multinomial(refLevel = 1), data = d)
summary(fit.vglm)
# Looking at the summary of the coefficients, we can eliminate variables that aren't statistically
# significant to simplify the model such as: crim, zn, indus, cha1. Since my reference level = 1,
# these variables don't contribute much to the log odds of being between the 25th&75th percentile
# Similarly, they aren't significant when it comes to predicting the log odds of being above the
# 75th percentile.
setwd("C:/Users/Duker/Desktop/Fall 2020/CS 614/Final Project")
#setwd("~/Desktop/614")
require(ggplot2)
require(RColorBrewer)
require(plyr)
require(dplyr)
require(varhandle)
require(DMwR)
require(cvms)
require(randomForest)
require(outliers)
require(broom)
require(caret)
require(rsample)
require(Metrics)
require(pROC)
require(keras)
require(tensorflow)
rm(list=ls())
data = read.csv("data/fraud.csv")
# Data Pre-Processing ####
attach(data)
str(data)
# Renaming destination names. Merchant (M) = 1, Customer (C) = 0.
df = data %>% select(-c(step, nameOrig, oldbalanceDest,
newbalanceDest, isFlaggedFraud))
df$nameDest = factor(ifelse(startsWith(nameDest, "M"), 1, 0))
df$isFraud = factor(df$isFraud)
df$type = factor(df$type)
# EDA + Plots ####
summary(df)
str(df)
# Distribution Plot of Transaction $
remove.outliers = function(z){
z.score = scale(z)
w = which(abs(z.score) <=3)
return(list(index = w, data = z[w]))
}
d = remove.outliers(df$amount)
amount2 = d$data
df2 = df[d$index,]
ggplot(df2, aes(x = amount2)) +
geom_histogram(bins = 30, color = "black", fill = "cornflowerblue") +
labs(x = "Transaction Amount ($)", y = "Count", title = "Distribution of Transaction Amount") +
theme(plot.title = element_text(size = 13, hjust = 0.5))
